% Created by: Alex Cadigan
% Last modified: 12-14-2016

% BEGIN - GUI functions generated by GUIDE
% --------------------------------------------------------------------------------------------------------------------------------------------

% Begins the process of creating the GUI window
function varargout = MultiplePWMProgram(varargin)

% varargout     A cell array for returning output arguments

% varargin      The input arguments

    % Begin initialization code
    
    gui_Singleton = 1;
    gui_State = struct('gui_Name', mfilename, 'gui_Singleton', gui_Singleton, 'gui_OpeningFcn', @MultiplePWMProgram_OpeningFcn, 'gui_OutputFcn', ... 
                       @MultiplePWMProgram_OutputFcn, 'gui_LayoutFcn', [], 'gui_Callback', []);
               
    if nargin && ischar(varargin{1})
        
        gui_State.gui_Callback = str2func(varargin{1});
        
    end

    if nargout
        
        [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
        
    else
        
        gui_mainfcn(gui_State, varargin{:});
        
    end
    
    % End initialization code
    
end

% Executes just before the GUI is made visible
function MultiplePWMProgram_OpeningFcn(hObject, eventdata, handles, varargin)

% hObject       The handle to the figure
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data
% varargin      Command line arguments to the MultiplePWMProgram

    % Choose default command line output for MultiplePWMProgram
    handles.output = hObject;

    % Update handles structure
    guidata(hObject, handles);

end

% Outputs from this function are returned to the command line
function varargout = MultiplePWMProgram_OutputFcn(hObject, eventdata, handles) 

% varargout     A cell array for returning output args

% hObject       The handle to the figure
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data 

    % Get default command line output from handles structure
    varargout{1} = handles.output;
    
end

% END - GUI functions generated by GUIDE
% --------------------------------------------------------------------------------------------------------------------------------------------

% Executes when the enterPWMDataButton button is pressed
function enterPWMDataButton_Callback(hObject, eventdata, handles)

% hObject       The handle to enterPWMDataButton
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data

    % Checks if the value entered for the numberPWMDatasets textbox is an integer greater or equal to 1
    if isempty(str2num(get(handles.numberPWMDatasets, 'string'))) || str2double(get(handles.numberPWMDatasets, 'string')) < 1 || mod(str2double(get(handles.numberPWMDatasets, 'string')), 1) ~= 0
        
        % Alerts user to the error if it is not
        uiwait(msgbox('Invalid entry for "Number of PWM datasets to enter".  Please enter only integer numbers greater or equal to 1.', 'Error', 'modal'));
        set(handles.numberPWMDatasets, 'string', 1);
        return;
        
    end

    % Hides and reveals the appropriate objects
    set(handles.numberOfPWMDatasetsToEnterTextbox, 'visible', 'off');
    set(handles.numberPWMDatasets, 'visible', 'off');
    set(handles.enterPWMDataButton, 'visible', 'off');
    set(handles.nucleotideDataForPWMTextbox, 'visible', 'on');
    set(handles.PWMData, 'visible', 'on');
    set(handles.similarityThresholdForPWMTextbox, 'visible', 'on');
    set(handles.similarityThreshold, 'visible', 'on');
    set(handles.numberOfMatchesNeededForPWMTextbox, 'visible', 'on');
    set(handles.numberOfMatches, 'visible', 'on');
    set(handles.enterButton, 'visible', 'on');
    set(handles.backButton, 'visible', 'on');

    % Countes how many PWMs have been entered
    global counter;
    counter = 1;
    
    % Stores the similarity threshold for each PWM
    global PWMSimilarityThresholds;
    PWMSimilarityThresholds = zeros(str2double(get(handles.numberPWMDatasets, 'string')), 1);
    
    % Stores the number of matches needed for each PWM
    global numberMatchesNeeded;
    numberMatchesNeeded = zeros(str2double(get(handles.numberPWMDatasets, 'string')), 1);

end

% Executes when the enterButton button is pressed
function enterButton_Callback(hObject, eventdata, handles)

% hObject       The handle to enterButton
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data

    global counter;

    % Checks if the PWM data was entered
    if isempty(get(handles.PWMData, 'string'))
        
        % Alerts user to the error if it was not
        uiwait(msgbox(['No data entered for "Nucleotide data for PWM ', num2str(counter), '".'], 'Error', 'modal'));
        return;
        
    end

    % Checks if the value entered for similarity threshold is an integer greater than or equal to 0
    if isempty(str2num(get(handles.similarityThreshold, 'string'))) || str2double(get(handles.similarityThreshold, 'string')) < 0
        
        % Alerts user to the error to the error if it is not
        uiwait(msgbox(['Invalid entry for "Similarity threshold for PWM ', num2str(counter), '".  Please only enter numbers greater than or equal to 0.'], 'Error', 'modal'));
        set(handles.similarityThreshold, 'string', 5);
        return;
        
    end
    
    % Checks if the value entered for number of sequences needed is an integer greater than or equal to 0
    if isempty(str2num(get(handles.numberOfMatches, 'string'))) || str2double(get(handles.numberOfMatches, 'string')) < 0 || mod(str2double(get(handles.numberOfMatches, 'string')), 1) ~= 0
        
        % Alerts user to the error if it is not
        uiwait(msgbox(['Invalid entry for "Number of matches needed for PWM ', num2str(counter), '".  Please only enter integer numbers greater than or equal to 0.'], 'Error', 'modal'));
        set(handles.numberOfMatches, 'string', 1);
        return;
        
    end

    % Stores the PWM dataset
    global PWMDatasets;
    PWMDatasets{counter} = get(handles.PWMData, 'string');

    % Stores the similarity threshold of the PWM
    global PWMSimilarityThresholds;
    PWMSimilarityThresholds(counter, 1) = str2double(get(handles.similarityThreshold, 'string'));
    
    % Stores the number of matches needed for the PWM
    global numberMatchesNeeded;
    numberMatchesNeeded(counter, 1) = str2double(get(handles.numberOfMatches, 'string'));
    
    counter = counter + 1;
    
    % Checks if the last PWM has been entered
    if counter > str2double(get(handles.numberPWMDatasets, 'string'))
        
        % Hides the PWM data entry objects and shows the query data objects
        set(handles.nucleotideDataForPWMTextbox, 'visible', 'off');
        set(handles.PWMData, 'visible', 'off');
        set(handles.similarityThresholdForPWMTextbox, 'visible', 'off');
        set(handles.similarityThreshold, 'visible', 'off');
        set(handles.numberOfMatchesNeededForPWMTextbox, 'visible', 'off');
        set(handles.numberOfMatches, 'visible', 'off');
        set(handles.enterButton, 'visible', 'off');
        set(handles.AllPWMDatasetsEnteredTextbox, 'visible', 'on');
        set(handles.queryNucleotideDataTextbox, 'visible', 'on');
        set(handles.queryData, 'visible', 'on');
        set(handles.windowSizeTextbox, 'visible', 'on');
        set(handles.windowSize, 'visible', 'on');
        set(handles.beginButton, 'visible', 'on');
        
    else
        
        % Resets the PWMData textbox
        set(handles.PWMData, 'string', []);

        % Updates the objects in the GUI
        set(handles.nucleotideDataForPWMTextbox, 'string', ['Nucleotide data for PWM ', num2str(counter), ':']);
        set(handles.similarityThresholdForPWMTextbox, 'string', ['Similarity threshold for PWM ', num2str(counter), ':']);
        set(handles.numberOfMatchesNeededForPWMTextbox, 'string', ['Number of matches needed for PWM ', num2str(counter), ':']);
        
    end

end

% Executes when the backButton button is pressed
function backButton_Callback(hObject, eventdata, handles)

% hObject       The handle to backButton
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data

    % Hides and reveals the appropriate objects
    set(handles.nucleotideDataForPWMTextbox, 'visible', 'off');
    set(handles.nucleotideDataForPWMTextbox, 'string', 'Nucleotide data for PWM 1:');
    set(handles.AllPWMDatasetsEnteredTextbox, 'visible', 'off');
    set(handles.PWMData, 'visible', 'off');
    set(handles.PWMData, 'string', []);
    set(handles.similarityThresholdForPWMTextbox, 'visible', 'off');
    set(handles.similarityThresholdForPWMTextbox, 'string', 'Similarity threshold for PWM 1:');
    set(handles.similarityThreshold, 'visible', 'off');
    set(handles.similarityThreshold, 'string', 5);
    set(handles.numberOfMatchesNeededForPWMTextbox, 'visible', 'off');
    set(handles.numberOfMatchesNeededForPWMTextbox, 'string', 'Number of matches needed for PWM 1:');
    set(handles.numberOfMatches, 'visible', 'off');
    set(handles.numberOfMatches, 'string', 1);
    set(handles.enterButton, 'visible', 'off');
    set(handles.backButton, 'visible', 'off');
    set(handles.numberOfPWMDatasetsToEnterTextbox, 'visible', 'on');
    set(handles.numberPWMDatasets, 'visible', 'on');
    set(handles.enterPWMDataButton, 'visible', 'on');
    set(handles.queryNucleotideDataTextbox, 'visible', 'off');
    set(handles.queryData, 'visible', 'off');
    set(handles.windowSizeTextbox, 'visible', 'off');
    set(handles.windowSize, 'visible', 'off');
    set(handles.beginButton, 'visible', 'off');
    
    % Resets global variables
    global PWMDatasets;
    PWMDatasets = [];
    global PWMSimilarityThresholds;
    PWMSimilarityThresholds = [];
    global numberMatchesNeeded;
    numberMatchesNeeded = [];
    global counter;
    counter = 1;

end

% Executes when the beginButton button is pressed
function beginButton_Callback(hObject, eventdata, handles)

% hObject       The handle to beginButton
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data

    % Checks if the query data textbox is empty
    if isempty(get(handles.queryData, 'string'))
        
        % Alerts user to the error if it is
        uiwait(msgbox('No data entered for "Query nucleotide data".', 'Error', 'modal'));
        return;
        
    end
    
    % Checks if the window size entered is an integer number greater than or equal to 0
    if isempty(num2str(get(handles.windowSize, 'string'))) || str2double(get(handles.windowSize, 'string')) < 0 || mod(str2double(get(handles.windowSize, 'string')), 1) ~= 0
        
        % Alerts user to the error if it is not
        uiwait(msgbox('Invalid entry for "Window size".  Please only enter integer numbers greater than or equal to 0.', 'Error', 'modal'));
        set(handles.windowSize, 'string', 50);
        return;
        
    end
    
    % Stores the window size
    windowSize = str2double(get(handles.windowSize, 'string'));

    global PWMDatasets;
    positionWeightedMatrices = {};

    % Builds and stores the position weighted matrices
    for PWMNumber = 1 : length(PWMDatasets)

        positionWeightedMatrices{PWMNumber} = BuildPWM(PWMDatasets{PWMNumber});
        
    end
    
    % Stores the raw query data
    rawQueryData = upper(get(handles.queryData, 'string'));
    
    % Stores the refined query data
    queryData = '';
    
    % Goes through every character in the raw query data entered by the user
    for row = 1 : size(rawQueryData, 1)
        
        for column = 1 : size(rawQueryData, 2)
            
            % Checks if the current character is a valid nucleotide
            if ismember(rawQueryData(row, column), 'ACGT')
                
                % Adds the valid nucleotide to a string holding the sequence
                queryData = strcat(queryData, rawQueryData(row, column));
                
            end
            
        end
        
    end
    
    % Creates the structure to store the results of the search
    results = {'Window Number', 'Window Sequence', 'Position of Window', 'Sequence', 'Position of Sequence in window', 'PWMScore', 'Is Sequence a Reverse Complement'};

    global PWMSimilarityThresholds;
    global numberMatchesNeeded;
    
    windowNumber = 1;
    
    % Runs through the query data
    for windowIndex = 1 : length(queryData) - (windowSize - 1)

        % Stores the temporary subsequence of length windowSize
        windowSequence = queryData(windowIndex : windowIndex + (windowSize - 1));

        % Stores the sequence match information
        sequenceResults = {};
        scoreResults = {};
        positionResults = {};
        PWMNumberResults = {};
        reverseComplementResults = {};
        
        % Stores how many PWMs have enough sequence matches to be flagged as output
        numberValidPWMs = 0;

        % Runs through all the PWMs
        for PWMNum = 1 : length(positionWeightedMatrices)
            
            % Stores how many sequences have scored high enough to be matches
            numberSequenceMatches = 0;
            
            % Stores the current PWM and similarity threshold to work on
            currentPWM = positionWeightedMatrices{PWMNum};
            currentSimilarityThreshold = PWMSimilarityThresholds(PWMNum, 1);
         
            % Runs through the subsequence of length windowsize from the query data
            for windowSequenceIndex = 1 : length(windowSequence) - (length(currentPWM) - 1)
                
                % Stores a temporary subsequence from the window sequence
                subsequence = windowSequence(windowSequenceIndex : windowSequenceIndex + (length(currentPWM) - 1));
                
                % Stores the scores of the subsequence and reverse compliment
                subsequenceScore = calculatePWMScore(subsequence, currentPWM);
                reverseComplementScore = calculatePWMScore(createReverseComplement(subsequence), currentPWM);

                % Checks if the subsequence scored high enough
                if subsequenceScore >= currentSimilarityThreshold

                    % Updates the sequence match information
                    sequenceResults = [sequenceResults; {subsequence}];
                    scoreResults = [scoreResults; {subsequenceScore}];
                    positionResults = [positionResults; {windowSequenceIndex}];
                    PWMNumberResults = [PWMNumberResults; {PWMNum}];
                    reverseComplementResults = [reverseComplementResults; {'No'}];
                    numberSequenceMatches = numberSequenceMatches + 1;
                    
                end
                    
                % Checks if the reverse complement of the subsequence scored high enough
                if reverseComplementScore >= currentSimilarityThreshold
                    
                    % Updates the sequence match information
                    sequenceResults = [sequenceResults; {createReverseComplement(subsequence)}];
                    scoreResults = [scoreResults; {reverseComplementScore}];
                    positionResults = [positionResults; {windowSequenceIndex}];
                    PWMNumberResults = [PWMNumberResults; {PWMNum}];
                    reverseComplementResults = [reverseComplementResults; {'Yes'}];
                    numberSequenceMatches = numberSequenceMatches + 1;

                end
                
            end

            % Checks if there were enough hits for this PWM
            if numberSequenceMatches >= numberMatchesNeeded(PWMNum, 1)
                
                numberValidPWMs = numberValidPWMs + 1;
                
            end
            
        end

        % Checks if all the PWMs had enough matches
        if numberValidPWMs >= length(positionWeightedMatrices)
            
            % Runs through the sequence matches
            for sequenceNumber = 1 : length(sequenceResults)

                % Updates the results
                results = [results; {num2str(windowNumber), windowSequence, [num2str(windowIndex), ' to ', num2str(windowIndex + (windowSize - 1)), ' base pairs'], sequenceResults{sequenceNumber}, num2str(positionResults{sequenceNumber}), [num2str(scoreResults{sequenceNumber}), ' for PWM number ', num2str(PWMNumberResults{sequenceNumber})], reverseComplementResults{sequenceNumber}}];

            end
                
            windowNumber = windowNumber + 1;

        end
        
    end
    
    % Creates a timestamp
    dateS = datestr(now, 'SS');
    dateM = datestr(now, 'MM');
    dateH = datestr(now, 'HH');
    dateMDY = datestr(now, 'mmmm dd, yyyy');
    
    % Gets the path to the .m file where the project is located
    mainDirectory = fileparts(mfilename('fullpath'));
    
    % Enables the xlwrite function to be used
    javaaddpath(fullfile(mainDirectory, 'poi_library', 'poi-3.8-20120326.jar'));
    javaaddpath(fullfile(mainDirectory, 'poi_library', 'poi-ooxml-3.8-20120326.jar'));
    javaaddpath(fullfile(mainDirectory, 'poi_library', 'poi-ooxml-schemas-3.8-20120326.jar'));
    javaaddpath(fullfile(mainDirectory, 'poi_library', 'xmlbeans-2.3.0.jar'));
    javaaddpath(fullfile(mainDirectory, 'poi_library', 'dom4j-1.6.1.jar'));
    javaaddpath(fullfile(mainDirectory, 'poi_library', 'stax-api-1.0.1.jar'));
    
    % Writes and opens an excel file containing the results
    xlwrite(fullfile(mainDirectory, 'Results', [dateMDY ' ' dateH '-' dateM '-' dateS]), results);
    system(['open "' fullfile(mainDirectory, 'Results', [dateMDY ' ' dateH '-' dateM '-' dateS '.xlsx"'])]);

end

% Builds a position weight matrix given some nucleotide data
function positionWeightedMatrix = BuildPWM(PWMData)

% positionWeightedMatrix           The position weight matrix that was built

% PWMData      The given nucleotide sequence data

    % Creates the template of the matrix
    positionFrequencyMatrix = zeros(4, size(PWMData, 2));
   
    % Goes through every row of the PWM data
    for row = 1 : size(PWMData, 1)

        % Goes through every column of the PWM data
        for column = 1 : size(PWMData, 2)

            % Checks if current character is a valid nucleotide
            if ismember(PWMData(row, column), 'ACGT')

                % Determines which nucleotide position in the matrix to increment
                if strcmp(PWMData(row, column), 'A')

                    positionFrequencyMatrix(1, column) = positionFrequencyMatrix(1, column) + 1;
                    
                elseif strcmp(PWMData(row, column), 'C')

                    positionFrequencyMatrix(2, column) = positionFrequencyMatrix(2, column) + 1;
                    
                elseif strcmp(PWMData(row, column), 'G')

                    positionFrequencyMatrix(3, column) = positionFrequencyMatrix(3, column) + 1;
                    
                else

                    positionFrequencyMatrix(4, column) = positionFrequencyMatrix(4, column) + 1;
                    
                end

            end

        end
        
    end
    
    % Creates the position probability matrix
    positionProbabilityMatrix = positionFrequencyMatrix / size(PWMData, 1);

    % Creates the position weighted matrix
    positionWeightedMatrix = log(positionProbabilityMatrix / 0.25);

end

% Determines the position weight matrix score of a given sequence
function score = calculatePWMScore(sequence, PWM)

% score         The PWM score of the sequence

% sequence      The given nucleotide sequence
% PWM           The position weight matrix to use

    score = 0;

    % Goes through every character in the sequence
    for index = 1 : length(sequence)

        % Updates the score of the sequence
        if strcmp(sequence(index), 'A')
            
            score = score + PWM(1, index);
            
        elseif strcmp(sequence(index), 'C')
                        
            score = score + PWM(2, index);
            
        elseif strcmp(sequence(index), 'G')
            
            score = score + PWM(3, index);
            
        else
            
            score = score + PWM(4, index);
            
        end
        
    end

end

% Determines the reverse complement of a given sequence
function reverseComplement = createReverseComplement(sequence)

% reverseComplement       The reverse complement of the sequence

% sequence      The given sequence to get the reverse complement of

    reverseComplement = '';

    % Goes through every character in the sequence
    for index = length(sequence) : -1 : 1

        % Assigns each character to it's reverse compelement
        if strcmp(sequence(index), 'A')
            
            reverseComplement = strcat(reverseComplement, 'T');
            
        elseif strcmp(sequence(index), 'C')
            
            reverseComplement = strcat(reverseComplement, 'G');
            
        elseif strcmp(sequence(index), 'G')
            
            reverseComplement = strcat(reverseComplement, 'C');
            
        else
            
            reverseComplement = strcat(reverseComplement, 'A');
            
        end
        
    end

end

% Executes when the resetbutton button is pressed
function resetButton_Callback(hObject, eventdata, handles)

% hObject       The handle to resetButton
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data

    % Resets all objects to their default values
    set(handles.nucleotideDataForPWMTextbox, 'visible', 'off');
    set(handles.nucleotideDataForPWMTextbox, 'string', 'Nucleotide data for PWM 1:');
    set(handles.AllPWMDatasetsEnteredTextbox, 'visible', 'off');
    set(handles.PWMData, 'visible', 'off');
    set(handles.PWMData, 'string', []);
    set(handles.similarityThresholdForPWMTextbox, 'visible', 'off');
    set(handles.similarityThresholdForPWMTextbox, 'string', 'Similarity threshold for PWM 1:');
    set(handles.similarityThreshold, 'visible', 'off');
    set(handles.similarityThreshold, 'string', 5);
    set(handles.numberOfMatchesNeededForPWMTextbox, 'visible', 'off');
    set(handles.numberOfMatchesNeededForPWMTextbox, 'string', 'Number of matches needed for PWM 1:');
    set(handles.numberOfMatches, 'visible', 'off');
    set(handles.numberOfMatches, 'string', 1);
    set(handles.enterButton, 'visible', 'off');
    set(handles.backButton, 'visible', 'off');
    set(handles.queryNucleotideDataTextbox, 'visible', 'off');
    set(handles.queryData, 'visible', 'off');
    set(handles.queryData, 'string', []);
    set(handles.windowSizeTextbox, 'visible', 'off');
    set(handles.windowSize, 'visible', 'off');
    set(handles.windowSize, 'string', 50);
    set(handles.beginButton, 'visible', 'off');
    set(handles.numberOfPWMDatasetsToEnterTextbox, 'visible', 'on');
    set(handles.numberPWMDatasets, 'visible', 'on');
    set(handles.numberPWMDatasets, 'string', 1);
    set(handles.enterPWMDataButton, 'visible', 'on');
    
    % Resets global variables
    global PWMDatasets;
    PWMDatasets = [];
    global PWMSimilarityThresholds;
    PWMSimilarityThresholds = [];
    global numberMatchesNeeded;
    numberMatchesNeeded = [];
    global counter;
    counter = 1;
    
end

% --------------------------------------------------------------------------------------------------------------------------------------------
% BEGIN - Unused functions generated by GUIDE

% Executes when there is a callback to the numberPWMDatasets textbox
function numberPWMDatasets_Callback(hObject, eventdata, handles)

% hObject       The handle to numberPWMDatasets
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data

end

% Executes during the numberPWMDatasets textbox creation after setting all properties
function numberPWMDatasets_CreateFcn(hObject, eventdata, handles)

% hObject       The handle to numberPWMDatasets
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       Empty - The handles are not created until after all CreateFcns are called

end

% Executes when there is a callback to the PWMData textbox
function PWMData_Callback(hObject, eventdata, handles)

% hObject       The handle to PWMData
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data

end

% Executes during the PWMData textbox creation after setting all properties
function PWMData_CreateFcn(hObject, eventdata, handles)

% hObject       The handle to PWMData
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       Empty - The handles are not created until after all CreateFcns are called

end

% Executes when there is a callback to the similarityThreshold textbox
function similarityThreshold_Callback(hObject, eventdata, handles)

% hObject       The handle to similarityThreshold
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data

end

% Executes during the similarityThreshold textbox creation after setting all properties
function similarityThreshold_CreateFcn(hObject, eventdata, handles)

% hObject       The handle to similarityThreshold
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       Empty - The handles are not created until after all CreateFcns are called

end

% Executes when there is a callback to the numberOfMatches textbox
function numberOfMatches_Callback(hObject, eventdata, handles)

% hObject       The handle to numberOfMatches
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data

end

% Executes during the numberOfMatches textbox creation after setting all properties
function numberOfMatches_CreateFcn(hObject, eventdata, handles)

% hObject       The handle to numberOfMatches
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       Empty - The handles are not created until after all CreateFcns are called

end

% Executes when there is a callback to the queryData textbox
function queryData_Callback(hObject, eventdata, handles)

% hObject       The handle to queryData
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data

end

% Executes during the queryData textbox creation after setting all properties
function queryData_CreateFcn(hObject, eventdata, handles)

% hObject       The handle to queryData
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       Empty - The handles are not created until after all CreateFcns are called

end

% Executes when there is a callback to the windowSize textbox
function windowSize_Callback(hObject, eventdata, handles)

% hObject       The handle to windowSize
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       A structure with handles and user data

end

% Executes during the windowSize textbox creation after setting all properties
function windowSize_CreateFcn(hObject, eventdata, handles)

% hObject       The handle to windowSize
% eventdata     This is reserved to be defined in a future version of MATLAB
% handles       Empty - The handles are not created until after all CreateFcns are called

end

% END - Unused functions generated by GUIDE 
% --------------------------------------------------------------------------------------------------------------------------------------------
